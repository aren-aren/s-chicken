<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.groups.schicken.Employee.EmployeeDAO">
	<sql id="search">
		<choose>
			<when test="kind=='kind1'">
				where employee.name LIKE CONCAT('%', #{search}, '%')
			</when>
		</choose>
	</sql>


	<select id="passwordinfo" resultType="employeeVO">
		select password , date_of_employment from employee where id = #{id};
	</select>




	<insert id="join" parameterType="EmployeeVO">
		<selectKey resultType="String" keyProperty="id"
			order="BEFORE">
			SELECT concat (#{dateOfEmployment}, nextval(seq4))
		</selectKey>
		INSERT INTO employee
		(
		id,
		password,
		name,
		phone_number,
		email,address,
		address_detail,
		postcode,
		date_of_employment,
		resident_number,
		salary,
		account_Number,
		bank_name,
		is_leaved,
		department_id,pos_id)
		VALUES (#{id},
		#{password}, #{name}, #{phoneNumber}, #{email},
		#{address},
		#{addressDetail}, #{postcode},
		#{dateOfEmployment}, #{residentNumber},
		10000, #{accountNumber}, #{bankName}, 1,
		#{departmentId}, #{posId})
	</insert>



	<select id="userDetail" parameterType="EmployeeVO"
		resultMap="employeeDetails">
		SELECT
		employee.id,
		employee.name,
		employee.phone_number,
		employee.email,
		employee.address,
		employee.address_detail,
		employee.postcode,
		employee.date_of_employment,
		employee.resident_number,
		employee.salary,
		employee.account_number,
		employee.bank_name,
		employee.is_leaved,
		employee.department_id,
		employee.pos_id,
		department.name AS dept_name,
		department.contact_number,
		code.name AS code_name,
		a.id AS file_Id
		FROM
		employee
		LEFT JOIN
		department ON employee.department_id = department.id
		LEFT JOIN
		code ON employee.pos_id = code.id AND code.type_id = 300
		LEFT JOIN
		attach a ON a.tbl_id = 1077 AND a.parent_id = employee.id
		WHERE
		employee.id = #{id}
	</select>


	<select id="getDetail" parameterType="String"
		resultMap="getDetailMap">
		SELECT
		emp.*,
		c.id role_id,
		c.name role_name
		from
		employee emp
		LEFT JOIN
		department dept
		ON emp.department_id = dept.id
		LEFT JOIN
		dept_role r
		ON r.id = dept.id
		LEFT JOIN
		code c
		ON c.id = r.rol_id and c.type_id = '200'
		where emp.id=#{id}
	</select>

	<resultMap id="getDetailMap" type="EmployeeVO"
		autoMapping="true">
		<id column="id" property="id" />
		<collection property="roleVOs" ofType="RoleVO"
			columnPrefix="role_" autoMapping="true">
			<id column="id" property="id" />
		</collection>
	</resultMap>



	<select id="userList" resultType="employeeVO"
		parameterType="Pager" resultMap="employeeDetails">
		SELECT
		employee.id,
		employee.name,
		department.name AS dept_name ,
		code.name AS code_name
		FROM employee
		INNER JOIN department ON employee.department_id = department.id
		INNER JOIN code ON employee.pos_id = code.id
		<include refid="search" />
		AND employee.is_leaved = 1 and code.type_id =300
		order by name DESC
		Limit #{startIndex}, #{perPage}
	</select>


	<!-- 퇴사자 -->
	<select id="isuserList" resultType="employeeVO"
		parameterType="Pager" resultMap="employeeDetails">
		SELECT
		employee.id,
		employee.name,
		employee.is_leaved,
		department.name
		AS dept_name,
		code.name AS code_name
		FROM employee
		INNER JOIN
		department ON employee.department_id = department.id
		INNER JOIN
		code ON employee.pos_id = code.id AND code.type_id = 300
		<include refid="search" />
		AND employee.is_leaved = 0
		ORDER BY employee.name DESC
		Limit  #{startIndex}, #{perPage}
	</select>


	<update id="updateEmployee" parameterType="EmployeeVO">
		UPDATE employee
		SET
		employee.phone_number = #{phoneNumber},
		employee.email = #{email},
		employee.account_number = #{accountNumber},
		employee.bank_name = #{bankName},
		employee.department_id = #{departmentId},
		employee.pos_id = #{posId},
		employee.postcode = #{postcode},
		employee.address = #{address},
		employee.address_detail = #{addressDetail},
		employee.is_leaved = #{isLeaved}
		WHERE id = #{id}
	</update>




	<select id="getTotalCount">
		select count(id) from employee
		<include refid="search" />
	</select>
		<select id="getTotalCount2">
		SELECT COUNT(id) FROM (select * from employee where  employee.is_leaved =0) AS employee
		<include refid="search" />
	</select>



	<update id="password" parameterType="EmployeeVO">
		update employee set password
		=#{password}
		WHERE id = #{id}
		AND name = #{name}
		AND email = #{email}
	</update>



	<select id="role" parameterType="EmployeeVO" resultMap="role">
		select * from code where type_id = 200
	</select>



	<select id="rolelist" resultType="RoleVO" parameterType="RoleVO">
		select id, rol_id from dept_role where id = #{id}
	</select>


	<delete id="roledelete">
		delete FROM dept_role WHERE id = #{departmentId}
	</delete>

	<update id="passupdate" parameterType="EmployeeVO">
		update employee SET password = #{password} where employee.id = #{id}
	</update>


	<insert id="roleinsert">
		insert into dept_role (id, rol_id)
		<foreach collection="list" item="i" open="VALUES "
			separator=",">
			(#{i.id}, #{i.rolId})
		</foreach>
	</insert>

	<!-- employee의 아이디의 리스트로 employee의 이름을 EmployeeVO의 리스트로 가져옴 -->
	<select id="getNamesByIds">
		SELECT
			  id
			, name
		FROM employee
		WHERE id
		<foreach collection="ids" item="id" open="IN (" close=")" separator=",">
			#{id}
		</foreach>
	</select>




	<resultMap type="EmployeeVO" id="employeeDetails">
		<id column="id" property="id" />
		<result column="password" property="password" />
		<result column="name" property="name" />
		<result column="phone_number" property="phoneNumber" />
		<result column="email" property="email" />
		<result column="address" property="address" />
		<result column="address_detail" property="addressDetail" />
		<result column="postcode" property="postcode" />
		<result column="date_of_employment" property="dateOfEmployment" />
		<result column="resident_number" property="residentNumber" />
		<result column="salary" property="salary" />
		<result column="account_number" property="accountNumber" />
		<result column="bank_name" property="bankName" />
		<result column="is_leaved" property="isLeaved" />
		<result column="department_id" property="departmentId" />
		<result column="pos_id" property="posId" />


		<association property="department" javaType="DepartmentVO">
			<result column="dept_name" property="name" />
			<result column="contact_Number" property="contactNumber" />
			<result column="sort" property="sort" />
			<result column="upper_id" property="upperId" />
			<result column="depth" property="depth" />
		</association>


		<association property="position" javaType="CodeVO">
			<result column="type_id" property="typeId" />
			<result column="code_name" property="name" />
			<result column="use" property="use" />
		</association>


		<association property="file" javaType="FileVO">
			<result column="file_Id" property="id" />
		</association>
		<!-- <association property="social" javaType="SocialVO"> <result column="social_id"
			property="social_id" /> <result column="kind" property="kind" /> <result
			column="employee_id" property="employeeId" /> </association> -->

	</resultMap>


	<resultMap type="EmployeeVO" id="role">

		<association property="department" javaType="DepartmentVO">
			<result column="deptname" property="name" />
			<result column="contact_Number" property="contactNumber" />
			<result column="sort" property="sort" />
			<result column="upper_id" property="upperId" />
			<result column="depth" property="depth" />
		</association>

		<association property="roleVO" javaType="RoleVO">
			<result column="dept_role_id" property="id" />
			<result column="rol_id" property="rolId" />
		</association>
		<association property="position" javaType="CodeVO">
			<result column="id" property="id" />
			<result column="type_id" property="typeId" />
			<result column="name" property="name" />
			<result column="use" property="use" />
		</association>

	</resultMap>
</mapper>
