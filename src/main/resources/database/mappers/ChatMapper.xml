<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.groups.schicken.chatting.ChatDAO">
    <select id="getChatroomByChatroomId">
        SELECT
              cr.id
            , notice
            , cr.type
            , room_name AS "name"
            , max(cms.send_date) AS "last_chatting"
            , last_read_time
            , join_date
        FROM chatroom cr
            INNER JOIN chat_member cm ON cr.id = cm.chatroom_id
            LEFT JOIN chat_message cms ON cms.chatroom_id = cr.id
        WHERE cm.employee_id=#{reqId} AND cr.id=#{chatroomId}
    </select>

    <select id="getChatroomList" resultMap="chatroomListResult">
        SELECT
              cr.id
            , NVL(cm.room_name, cr.default_name) AS "name"
            , cr.type
            , e.id AS "employee_id"
            , e.name AS "employee_name"
            , a.url  AS "profile_img"
            , ( SELECT count(cmg.id)
                FROM chat_message cmg
                WHERE
                         cr.id = chatroom_id
                    AND (cm.employee_id=#{id} AND NVL(cm.last_read_time,cm.join_date)&lt;cmg.send_date)
                ) AS "no_read_count"
        FROM chatroom cr
            INNER JOIN chat_member cm ON cr.id = cm.chatroom_id
            INNER JOIN employee e ON e.id = cm.employee_id
            LEFT JOIN attach a ON a.parent_id = e.id AND a.tbl_id = 1077
        WHERE cr.id IN (
            SELECT id
            FROM chatroom
                INNER JOIN chat_member ON id=chatroom_id
            WHERE employee_id=#{id})
        ORDER BY IF(cm.employee_id = #{id} , 1 , 2)
    </select>

    <resultMap id="chatroomListResult" type="ChatroomVO" autoMapping="true">
        <id column="id" property="id"/>
        <collection property="members" javaType="List" ofType="EmployeeProfileVO">
            <id column="employee_id" property="id"/>
            <result column="employee_name" property="name"/>
            <result column="profile_img" property="profileImg"/>
        </collection>
    </resultMap>

    <select id="getLastChatData">
        SELECT
              cm1.chatroom_id
            , cm1.id
            , cm1.send_date
            , concat(c.name , ' ', e.name ,' : ' , content) AS "content"
        FROM chat_message cm1
            INNER JOIN (
                SELECT
                      chatroom_id
                    , max(send_date) AS "send_date"
                FROM chat_message cm2
                WHERE cm2.chatroom_id <foreach collection="list" item="id" open="IN (" separator=", " close=")">#{id}</foreach>
                GROUP BY cm2.chatroom_id
            ) sub ON cm1.chatroom_id = sub.chatroom_id AND cm1.send_date = sub.send_date
            INNER JOIN employee e ON cm1.employee_id = e.id
            INNER JOIN code c ON c.id = e.pos_id AND c.type_id='300'
    </select>

    <select id="getChatroomData" resultMap="chatroomDataResult">
        SELECT
              cr.id AS "chatroom_id"
            , cm.room_name AS "chatroom_name"
            , e.id AS "employee_id"
            , concat(c.name, ' ' , e.name) AS "name"
            , a.url AS "profile_img"
            , d.name AS "department_name"
            , cm.last_read_time
        FROM chatroom cr
            INNER JOIN chat_member cm ON cr.id = cm.chatroom_id
            INNER JOIN employee e ON e.id = cm.employee_id
            INNER JOIN department d ON d.id = e.department_id
            INNER JOIN code c ON c.id = e.pos_id AND c.type_id='300'
            LEFT JOIN attach a ON a.parent_id = e.id AND a.tbl_id=1077
        WHERE cr.id=#{chatroomId}
        ORDER BY IF(employee_id = #{employeeId}, 1, 2)
    </select>

    <resultMap id="chatroomDataResult" type="ChattingVO" autoMapping="true">
        <id column="chatroom_id" property="chatroomId"/>
        <collection property="members" autoMapping="true" javaType="List" ofType="EmployeeProfileVO">
            <id column="employee_id" property="id"/>
        </collection>
    </resultMap>

    <select id="getChatMessageDataFirst">
        SELECT
              id
            , sender_id
            , type
            , send_date
            , content
        FROM (
            SELECT
                  id
                , employee_id AS "sender_id"
                , type
                , send_date
                , content
                , ROW_NUMBER() over (partition by 1 ORDER BY send_date) AS rn
            FROM chat_message
            WHERE chatroom_id=#{chatroomId}) cm
        <if test="lastReadTime != null">
        WHERE rn &lt;=<include refid="getLastReadRowNum"/>
        </if>
        <if test="lastReadTime == null">
        WHERE rn &lt;=20
        </if>
        ORDER BY send_date DESC
        LIMIT 20
    </select>

    <select id="getChatMessageData">
        SELECT
              id
            , employee_id AS "sender_id"
            , type
            , send_date
            , content
        FROM chat_message
        WHERE chatroom_id=#{chatroomId}
            AND send_date <if test="direction=='up'">&lt;#{from}</if><if test="direction=='down'">>#{from}</if>
        ORDER BY send_date <if test="direction=='up'">DESC</if>
        LIMIT 10
    </select>

    <insert id="createOneChatroom">
        INSERT INTO chatroom (id, type)
        VALUES (#{id}, #{type})
    </insert>

    <insert id="joinChatroom">
        INSERT INTO chat_member(chatroom_id, employee_id, room_name, join_date)
        VALUES (#{chatroom.id}, #{id}, #{chatroom.name}, #{chatroom.joinDate})
    </insert>

    <insert id="insertChat">
        INSERT INTO chat_message(id, chatroom_id, employee_id, type, send_date, content)
        VALUES (#{id}, #{chatroomId}, #{senderId}, #{type}, #{sendDate}, #{content})
    </insert>

    <select id="getChatroomName">
        SELECT default_name AS "name"
        FROM chatroom
        WHERE id=#{chatroomId}
    </select>

    <update id="updateLastRead">
        UPDATE chat_member
        SET last_read_time=#{sendDate}
        WHERE chatroom_id=#{chatroomId} AND employee_id=#{employeeId}
    </update>

    <update id="updateLastReadById">
        UPDATE chat_member
        SET last_read_time=(
            SELECT send_date
            FROM chat_message cm
            WHERE cm.id=#{chatId}
        )
        WHERE chatroom_id=#{chatroomId} AND employee_id=#{employeeId}
    </update>

    <sql id="getLastReadRowNum">
        (SELECT (sub.r + 13)
        FROM (
            SELECT
                  send_date
                , ROW_NUMBER() over (partition by 1 ORDER BY send_date) AS r
            FROM chat_message
            WHERE chatroom_id=#{chatroomId} ) sub
        WHERE send_date=#{lastReadTime})
    </sql>
</mapper>
